class Solution {
public:
    vector<bool>prime;
    void SieveOfEratosthenes(int n)
{
    prime.resize(n,true);
 
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
 
    
}
    vector<int> closestPrimes(int left, int right) {
        
        SieveOfEratosthenes(right+1);
        int a1=-1,a2=-1;
        int prev=-1,curr=-1;
        int diff = INT_MAX;
        int i = left;
        while(i <= right){
            if(prime[i]){
                if(curr == -1){
                    curr = i;
                }
                else{
                    prev = curr;
                    curr = i;
                }
            }
            
            if(prev != -1 && curr != -1 && prev != 1 && curr != 1){
                if(diff > curr-prev){
                    a1 = prev;
                    a2 = curr;
                    diff = curr-prev;
                    
                    if(diff == 2){
                        break;
                    } 
                }
            }
            
            i++;
        }
        
        return {a1,a2};
    }
};
