class Solution {
public:
long long count=0;

void countPairs(int start,int mid,int end,vector<int>&arr,int diff){
    int left = start;
    int right = mid+1;

    while(left <= mid && right <= end){
        
        if(arr[left] <= (arr[right] + diff)){
            count += end-right+1;
            left++;
        }
        else{
            right++;
        }
    }

    sort(arr.begin()+start,arr.begin()+end+1);

    return;
}
void mergeSort(int start,int end,vector<int>&arr,int diff){
    
    if(start == end){
        return;
    }

    int mid = (start+end)/2;

    mergeSort(start,mid,arr,diff);
    mergeSort(mid+1,end,arr,diff);

    countPairs(start,mid,end,arr,diff);

    return;
}
    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        count=0;
        int n = nums1.size();
        vector<int>arr(n);

        for(int i=0;i<n;i++){
            arr[i] = nums1[i] - nums2[i];
        }

        mergeSort(0,n-1,arr,diff);

        return count;
    }
};

// c[i] <= c[j] + diff
